# Generated by Django 3.2.7 on 2021-09-26 10:49

import django.contrib.auth.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('commentid', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('keywordid', models.AutoField(primary_key=True, serialize=False)),
                ('keyword', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'db_table': 'keyword',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('movieid', models.AutoField(primary_key=True, serialize=False)),
                ('tmdb_id', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=128)),
                ('genre', models.TextField(blank=True, null=True)),
                ('cast', models.TextField(blank=True, null=True)),
                ('keywords', models.TextField(blank=True, null=True)),
                ('overview', models.TextField(blank=True, null=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('backdrop_path', models.CharField(blank=True, max_length=128, null=True)),
                ('poster_path', models.CharField(blank=True, max_length=128, null=True)),
                ('production_countries', models.TextField(blank=True, null=True)),
                ('runtime', models.PositiveIntegerField(blank=True, null=True)),
                ('vote_average', models.FloatField(blank=True, null=True)),
                ('vote_count', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'movie',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('ratingid', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rating',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recommendationmovie',
            fields=[
                ('recommendid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'recommendationmovie',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Scrap',
            fields=[
                ('scrapid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'scrap',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Usermovielike',
            fields=[
                ('likeid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'usermovielike',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=128, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('nickname', models.CharField(max_length=128)),
                ('profileimg', models.CharField(blank=True, max_length=128, null=True)),
                ('like_country', models.CharField(blank=True, max_length=128, null=True)),
                ('movieti', models.CharField(blank=True, max_length=4, null=True)),
                ('like_genre', models.CharField(blank=True, max_length=128, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
